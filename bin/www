#!/usr/bin/env node


const app = require('../app'),
    debug = require('debug')('mongodbproject:server'),//引入debug模块，打印调试日志
    http = require('http'),
    socketConfig = require('../config/socket');
/**
 * 定义启动端口
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * 创建http服务
 */

const server = http.createServer(app);
socketConfig(server);
/**
 * 监听端口
 */

server.listen(port,  ()=> {
    const uri = 'http://localhost:' + port,
        serviceEndTime = new Date(),
        whenTime = serviceEndTime - app.serviceStartTime;
    console.log("服务已启动！用时为:" + whenTime + "ms,端口号为:" + port);
    console.log('> Listening at ' + uri)
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * 端口标准化函数
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * HTTP异常事件处理函数
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * 事件绑定函数
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
